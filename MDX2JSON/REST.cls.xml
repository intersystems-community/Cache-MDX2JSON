<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2014.1.1 (Build 702U)" ts="2014-11-13 01:39:57">
<Class name="MDX2JSON.REST">
<Description><![CDATA[
Class for REST-like web api for MDX2JSON transformation (and XML/A).<br>
Example: send HTTP POST request to web application with Dispatch class <b>MDX2JSON.REST</b>
with body: { "MDX":"QUERY" }, where QUERY is a correct MDX statement, ex:  <br> 
{<br>
        "MDX": "SELECT NON EMPTY [Product].[P1].[Product Category].Members ON 0,NON EMPTY [Outlet].[H1].[Region].Members ON 1 FROM [HoleFoods]"<br>
} <br>
You can send requests to:<br> <ul>
    <li>webapplication/Test - to get test info, %request, %response and %session</li> 
    <li>webapplication/MDX - to get result in JSON format for MDX query</li>
    <li>webapplication/MDXDrillthrough - to get resulting listing in JSON format for MDX Drillthrough query</li>
    <li>webapplication/MDX2XMLA - to get result in XML/A format for MDX query</li>
</ul>

Dashboard related requests are:
 <ul>
    <li>webapplication/Dashboards - get all dashboards in a namespace (GET request).</li>
    <li>webapplication/Widgets - get all dashboard widgets (POST request with {Dashboard:"DashboardName"} body).</li>
</ul>
To get information about possible Cube's filters and filters' values:<br><ul>
        <li>webapplication/FilterValues/:cube - to get all filters for DeepSee Cube in JSON format.</li> 
        <li>webapplication/FilterValues/:cube/:filter - to get all values for Filter for DeepSee Cube in JSON format.</li></ul> 
Example: send HTTP GET request to web application with Dispatch class <b>MDX2JSON.REST</b> and URL:<br>
/FilterValues/HoleFoods/[DateOfSale].[Actual].[MonthSold] -  to get information about possible values of [DateOfSale].[Actual].[MonthSold] in HoleFoods Cube.<br>
You can add a param Namespace to request to execute MDX in desired namespace (MDX2JSON package must be mapped to that namespace):<br>
webapplication/MDX?Namespace=Samples
]]></Description>
<IncludeCode>MDX2JSON.MDX2JSON</IncludeCode>
<Super>%CSP.REST</Super>
<TimeChanged>63504,5862.54237</TimeChanged>
<TimeCreated>63165,65257.8179</TimeCreated>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>
    <!-- Send objects in this format: {"MDX":"QUERY"} HTTP method: POST -->
   <Route Url="/MDX" Method="POST" Call="WriteJSONfromMDX"/>
   <Route Url="/MDX2JSONP" Method="POST" Call="WriteJSONPfromMDX"/>  
   <Route Url="/MDXDrillthrough" Method="POST" Call="WriteDrillthroughJSON"/>
   <Route Url="/MDX2XMLA" Method="POST" Call="WriteXMLAfromMDX"/>  

   <!-- Get info about availible filters and their values -->
   <Route Url="/FilterValues/:cube" Method="GET" Call="WriteFiltersForCube"/>
   <Route Url="/FilterValues/:cube/:filter" Method="GET" Call="WriteFilterValues"/> 
   
    <Route Url="/Widgets" Method="GET" Call="GetWidgets"/> 
      
    <Route Url="/Dashboards" Method="GET" Call="GetDashboardsList"/> 
    <Route Url="/Widgets" Method="POST" Call="GetWidgetsList"/>   
     
   <!-- Valid but illicit, do not use-->
   <Route Url="/MDX/:query" Method="GET" Call="WriteJSONfromMDXURL"/>  
   <Route Url="/MDXfilters/:query" Method="GET" Call="WriteFiltersForMDX"/>
   
   <!-- Drilldown -->
   <Route Url="/MDX/DrillInfo" Method="POST" Call="DrillInfo"/>

   <!-- Test method-->
   <Route Url="/Test" Method="GET" Call="Test"/>
 </Routes>
]]></Data>
</XData>

<Method name="Test">
<Description><![CDATA[
Test method, outputs <b>%request</b>, <b>%response</b> and <b>%session</b> objects. ]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    &html<<h1>Status: OK!</h1><br>>
    zw %request
    &html<<br><br>>
    zw %response
    &html<<br><br>>
    zw %session
    return $$$OK
]]></Implementation>
</Method>

<Method name="GetWidgetsList">
<Description><![CDATA[
Wrapper for ##class(MDX2JSON.Utils).GetWidgetsList()<br>
Converts incoming request object (JSON: {Dashboard:"Dashboard Full Name"} and calls abovementioned method.]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    set dashboard = $$$get("w")
    if (dashboard = "") {
        set st = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1)
        return:$$$ISERR(st) st
        set dashboard = obj.Dashboard
        set dashboard = $ZCVT(dashboard,"I","UTF8")
    }
    return ##class(MDX2JSON.Utils).GetWidgetsList(dashboard)
]]></Implementation>
</Method>

<Method name="GetDashboardsList">
<Description>
Returns JSON array of (title, path) for all dashboards in namespace (accessible to current user).</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set sql = "SELECT title, fullName As path FROM %DeepSee_Dashboard.Definition WHERE folderName = 'Mobile'"
    try {
        
        do ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,sql)
    } catch ex {
        write $$$ZENJSSTR($System.Status.GetErrorText(ex.AsStatus()))
    }
    return $$$OK
]]></Implementation>
</Method>

<Method name="WriteDrillthroughJSON">
<Description><![CDATA[
Wrapper for ##class(MDX2JSON.Utils).WriteDrillthroughJSON(pMDX).<br>
Converts incoming request object and calls abovementioned method.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    set obj = ##class(%ZEN.proxyObject).%New()
    set st = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1)
    return:$$$ISERR(st) st
    set tMDX = obj.MDX
    set tMDX = $ZCVT(tMDX,"I","UTF8")
    set st = ##class(MDX2JSON.Utils).WriteDrillthroughJSON(tMDX)
    return st
]]></Implementation>
</Method>

<Method name="WriteJSONfromMDXURL">
<Description>
Wrapper for ##class(MDX2JSON.Utils).WriteJSONPfromMDX(pMDX)
Do not use.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>MDX:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set MDX = $ZCONVERT($ZCONVERT(MDX ,"I","URL") ,"I","UTF8")
  set st = ##class(MDX2JSON.Utils).WriteJSONfromMDX(MDX)
  quit st
]]></Implementation>
</Method>

<Method name="WriteFiltersForMDX">
<Description>
Wrapper for ##class(MDX2JSON.Utils).WriteFiltersForMDX(pMDX)
Do not use.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>MDX:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set MDX = $ZCONVERT($ZCONVERT(MDX ,"I","URL") ,"I","UTF8")
  set st = ##class(MDX2JSON.Utils).WriteFiltersForMDX(MDX)
  quit st
]]></Implementation>
</Method>

<Method name="WriteFiltersForCube">
<Description>
Wrapper for ##class(MDX2JSON.Utils).WriteFiltersForCube(pCube)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Cube:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set Cube = $ZCONVERT($ZCONVERT(Cube ,"I","URL") ,"I","UTF8")
  set st = ##class(MDX2JSON.Utils).WriteFiltersForCube(Cube)
  quit st
]]></Implementation>
</Method>

<Method name="WriteFilterValues">
<Description>
Wrapper for ##class(MDX2JSON.Utils).WriteFilterValues(pCupe, pFilter)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Cube:%String,Filter:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set Cube = $ZCONVERT($ZCONVERT(Cube ,"I","URL") ,"I","UTF8")
  set Filter = $ZCONVERT($ZCONVERT(Filter ,"I","URL") ,"I","UTF8")
  set st = ##class(MDX2JSON.Utils).WriteFilterValues(Cube, Filter)
  quit st
]]></Implementation>
</Method>

<Method name="DrillInfo">
<Description>
Wrapper for classMethod zGetItemSpec^%DeepSee.Component.pivotTable
Retrieves drilldown information with given parameters.</Description>
<ClassMethod>1</ClassMethod>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.req,1)
    return:$$$ISERR(st) st
    s proxyObject = ##class(MDX2JSON.DrillItemInfo).%New()
    
    try {
        d ##class(%DeepSee.Component.pivotTable).GetItemSpec(
            proxyObject,
            req.cubeName,
            req.queryKey,
            req.sortDir,
            req.sortColumn,
            "row",
            req.row
        )
        w "{""spec"":""" _ proxyObject.spec _ """,""text"":""" _ proxyObject.text
          _ """,""childSpec"":""" _ proxyObject.childSpec _ """,""error"":""" _
          proxyObject.error _ """}"
    } catch (e) {
        if proxyObject.error = "" s proxyObject.error = e.AsSystemError()
        w "{""error"":""" _ proxyObject.error _ """}"
    }
    q $$$OK
]]></Implementation>
</Method>

<Method name="WriteJSONfromMDX">
<Description><![CDATA[
Wrapper for ##class(MDX2JSON.Utils).WriteJSONPfromMDX(pMDX)<br>
Converts incoming request object and calls abovementioned method.]]></Description>
<ClassMethod>1</ClassMethod>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set callback=$get(%request.Data("callback",1),"")
    if callback'="" w callback_"("
    set st = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1)
    return:$$$ISERR(st) st
    set tMDX = obj.MDX
    set tMDX = $ZCVT(tMDX,"I","UTF8")
    try {
        set st = ##class(MDX2JSON.Utils).WriteJSONfromMDX(tMDX)
    } catch ex {
        //zw obj
        set st=ex.AsStatus()
    }

    if callback'="" w ")"
    quit st
]]></Implementation>
</Method>

<Method name="WriteJSONPfromMDX">
<Description><![CDATA[
Wrapper for ##class(MDX2JSON.Utils).WriteJSONPfromMDX(pMDX)<br>
Converts incoming request object and calls abovementioned method.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    set obj = ##class(%ZEN.proxyObject).%New()
    set st = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1)
    quit:$$$ISERR(st) st
    set st = ##class(MDX2JSON.Utils).WriteJSONPfromMDX(obj.MDX)
    quit st
]]></Implementation>
</Method>

<Method name="WriteXMLAfromMDX">
<Description><![CDATA[
Wrapper for ##class(MDX2JSON.Utils).WriteXMLAfromMDX(pMDX)<br>
Converts incoming request object and calls abovementioned method.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st=$$$OK
    set obj = ##class(%ZEN.proxyObject).%New()
    set st = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1)
    quit:$$$ISERR(st) st
    set st = ##class(MDX2JSON.Utils).WriteXMLAfromMDX(obj.MDX)
    quit st
]]></Implementation>
</Method>

<Method name="DispatchRequest">
<Description><![CDATA[
Dispatch a REST request according to URL and Method.<br>
Add param Namespace to a request to execute MDX in desired namespace.]]></Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pUrl:%String,pMethod:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    do %response.SetHeader("Access-Control-Allow-Origin","*")
    do %response.SetHeader("Access-Control-Allow-Headers","Authorization")
    
    #dim tSC As %Status = $$$OK
    #dim e As %Exception.AbstractException
    
    #dim tMatcher As %Regex.Matcher
    
    #dim tArgs,tClass,tMatchUrl,tMapEntry,tRegEx,tTarget,tAccess As %String
    #dim tI,tIndex As %Integer
    #dim tResourceMatched As %Boolean
    #dim tMethodMatched As %Boolean
    
    Try {
        #; Check that the effective user ( could be unknown user ) can access this resource
        Set tAccess=$SYSTEM.Security.Check($Piece($zu(90,21,$namespace),"^",4))
        If tAccess'["READ,WRITE"
        {
            #; Don't want the session token
            Set %response.OutputSessionToken=0
            
            #; Set the Http Status
            Set %response.Status="401 Unauthorized"
        
            #; Write out the header
            Do %response.WriteHTTPHeader()
            
            #; Done
            Quit
        }
        
        return:($ZCVT(pMethod,"U") = "OPTIONS") $$$OK
        
        Set (tResourceMatched,tMethodMatched)=0
        
        #; Walk the dispatch map in collation order of defintion
        For tIndex=1:1 {
            
            #; Get the next map entry
            Set tMapEntry=..DispatchMap(tIndex) If tMapEntry="" Quit
             
            #; Pick out the RegEx
            Set tRegEx=$List(tMapEntry,1)
            
            #; Create a matcher
            Set tMatcher=##class(%Regex.Matcher).%New(tRegEx)
        
            #; Extract the match url from the application name
            Set tMatchUrl="/"_$Extract(pUrl,$Length(%request.Application)+1,*)
            
            #; Test each regular expression in turn, extracting the arguments,
            #; dispatching to the named method  
            If tMatcher.Match(tMatchUrl) {
                
                #; We have matched the resource
                Set tResourceMatched=1
                
                #; Now check method name
                If pMethod'=$List(tMapEntry,2) Continue
                
                Set tTarget=$List(tMapEntry,3)
                
                #; We have matched a method
                Set tMethodMatched=1
                
                #; Got a match, marshall the arguments
                If tMatcher.GroupCount {
                    For tI=1:1:tMatcher.GroupCount Set tArgs(tI)=tMatcher.Group(tI)
                    Set tArgs=tI
                } else {
                    Set tArgs=0
                }
                
                #; Check for optional ClassName prefix
                Set tClass=$classname()
                If tTarget[":" Set tClass=$Piece(tTarget,":"),tTarget=$Piece(tTarget,":",2)
                
                #; Dispatch
                set Namespace = $get(%request.Data("Namespace",1))
                
                if ((Namespace'="") && ##class(%SYS.Namespace).Exists(Namespace)) {
                    set oldNS = $Namespace
                    zn Namespace
                    Set tSC=$zobjclassmethod(tClass,tTarget,tArgs...)
                    zn oldNS
                } else {
                    Set tSC=$zobjclassmethod(tClass,tTarget,tArgs...)                   
                }
                If $$$ISERR(tSC) Do ..Http500(tSC)
                
                #; Don't want multiple matches
                Quit
            }
        }
        
        #; Didn't have a match for the resource, report not found
        If tResourceMatched=0 Set tSC=..Http404() Quit
        
        #; Had a match for resource but method not matched
        If tMethodMatched=0 Set tSC=..Http405() Quit
            
    } Catch (e) {
        
        #; Issue a '500'
        Do ..Http500(e)
    }
    
    If ..#UseSession=0 Set %session.EndSession=1
    
    Quit tSC
]]></Implementation>
</Method>

<Method name="Http500">
<Description><![CDATA[
Issue an '500' error and give some indication as to what occurred.<br>
<b>pStatus</b> - %status, not %Exception.AbstractException.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pStatus:%Exception.AbstractException</FormalSpec>
<Implementation><![CDATA[
    // we are expecting status
    #; Set the response Http status
    Set %response.Status="500 Internal Server Error"
    
    #; Return a helpful error string
    Write "{Error:"_$$$ZENJSSTR($System.Status.GetErrorText(pStatus))_"}"
]]></Implementation>
</Method>
</Class>
</Export>
